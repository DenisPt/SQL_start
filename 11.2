----------------------------------1----------------------------------
/* В базе данных Redis подберите коллекцию для подсчета посещений с определенных IP-адресов. */

Удобнее всего хранить данные в формате <ip адрес> - количество посещений.
При посещении пользователя проверять есть ли ip адрес в списке ключей командой EXISTS <ip адрес>, если нет, то добавлять пару
<ip адрес> - 1 командой SET <ip адрес> 1, если ip адрес уже присутствует в списке ключей, то увеличивать значение
для этого ключа на 1 командой INCR <ip адрес>. Если захотим посмотреть количество посещений, то используем команду GET <ip адрес>

----------------------------------2----------------------------------
/*При помощи базы данных Redis решите задачу поиска имени пользователя по электронному адресу
и наоборот, поиск электронного адреса пользователя по его имени. */

Базу данных хранить в двух хэшах, один с названием "user_email", у которого в качестве ключа используется имя пользователя, а значения - email
Второй хэш назвать "email_user" и в качестве ключа использовать email пользователя, а значение - имя пользователя.
При поиске имени пользователя по email использовать HGET email_user <email для поиска>
При поиске email по имени пользователя использовать HGET user_email <имя пользователя для поиска>

Получается двойное хранение информации, но как по-другому организовать - не знаю.

----------------------------------3----------------------------------
/*Организуйте хранение категорий и товарных позиций учебной базы данных shop в СУБД MongoDB.*/

use shop
db.shop.insert({type : "Categories"}, {name: "Процессоры"}) -- так добавляем все категории
db.shop.insert({type : "Goods"}, {name: "Intel Core i3-8100", description: "Процессор для настольных персональных компьютеров, основанных на платформе Intel.",
price: 7890.00, category: "Процессоры", created_at: "2020-10-22", updated_at: "2020-10-22"}) - так добавляем товары
в таком случае объектами будут и категории и товары, из-за чего будет дублироваться лишняя информация, но проще читабельность

другой вариант:
db.shop.insert({type : "Процессоры"}{1: {name: "Intel Core i3-8100", description: "Процессор для настольных персональных компьютеров, основанных на платформе Intel.",
price: 7890.00, created_at: "2020-10-22", updated_at: "2020-10-22"}}) -- так добавляем первый товар в категорию
db.shop.update({type: "Процессоры"}{$push:{{2: {name: "Intel Core i5-7400", description: "Процессор для настольных персональных компьютеров, основанных на платформе Intel.",
price: 12700.00, created_at: "2020-10-22", updated_at: "2020-10-22"}}}}) -- так добавляем следующие товары в категорию
в данном случае каждый объект будет являться категорией, у которой в качестве поддокументов будут выступать товары
